name: Docker Deploy

on:
    push:
        branches: [main]
    workflow_dispatch:

env:
    APP_NAME: siu-order-api
    APP_PORT: 10080

jobs:
    deploy:
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Stop and remove existing container
              run: |
                  if docker ps -a | grep -q ${{ env.APP_NAME }}; then
                    echo "Stopping existing container..."
                    docker stop ${{ env.APP_NAME }} || true
                    docker rm ${{ env.APP_NAME }} || true
                  fi
              continue-on-error: true

            - name: Remove old image
              run: |
                  if docker images | grep -q ${{ env.APP_NAME }}; then
                    echo "Removing old image..."
                    docker rmi ${{ env.APP_NAME }}:latest || true
                  fi
              continue-on-error: true

            - name: Build Docker image
              run: |
                  docker build -t ${{ env.APP_NAME }}:latest .

            - name: Run Docker container
              env:
                  DB_URL: ${{ secrets.DB_URL }}
                  DB_USERNAME: ${{ secrets.DB_USERNAME }}
                  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
              run: |
                  docker run -d \
                    --name ${{ env.APP_NAME }} \
                    -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
                    -e SPRING_PROFILES_ACTIVE=production \
                    -e DB_URL="${DB_URL}" \
                    -e DB_USERNAME="${DB_USERNAME}" \
                    -e DB_PASSWORD="${DB_PASSWORD}" \
                    -e SERVER_PORT=${{ env.APP_PORT }} \
                    -e DDL_AUTO=validate \
                    -e SHOW_SQL=false \
                    --restart unless-stopped \
                    ${{ env.APP_NAME }}:latest

            - name: Wait for container to start
              run: |
                  echo "Waiting for container to start..."
                  sleep 30

            - name: Health check
              run: |
                  for i in {1..12}; do
                    if docker exec ${{ env.APP_NAME }} curl -f http://localhost:${{ env.APP_PORT }}/actuator/health > /dev/null 2>&1; then
                      echo "✅ Container is healthy!"
                      exit 0
                    else
                      echo "⏳ Attempt $i/12: Container not ready yet..."
                      sleep 10
                    fi
                  done
                  echo "❌ Health check failed"
                  docker logs ${{ env.APP_NAME }}
                  exit 1

            - name: Show container status
              run: |
                  echo "=== Container Status ==="
                  docker ps | grep ${{ env.APP_NAME }}
                  echo "=== Container Logs (last 20 lines) ==="
                  docker logs --tail 20 ${{ env.APP_NAME }}
